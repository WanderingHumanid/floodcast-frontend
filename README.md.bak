# FloodCast Frontend

## Overview

The FloodCast frontend is a modern, responsive web application that visualizes flood prediction data with interactive maps and dashboards. It provides users with location-specific flood risk information, historical trends, and early warnings.

## Technologies

### Core Framework
- **Next.js**: React framework providing server-side rendering, static site generation, and API routes
- **React**: JavaScript library for building user interfaces with reusable components
- **TypeScript**: Strongly typed programming language that builds on JavaScript for improved developer experience

### UI Components & Styling
- **Tailwind CSS**: Utility-first CSS framework for rapidly building custom designs
- **Shadcn/UI**: Collection of reusable components built with Radix UI and Tailwind CSS
- **Framer Motion**: Production-ready motion library for React for creating animations
- **React Icons**: Comprehensive library of icons for React applications

### Mapping & Visualization
- **Mapbox GL JS**: Interactive, customizable maps with vector tiles and WebGL rendering
- **D3.js**: Data visualization library for creating dynamic, interactive data visualizations
- **Chart.js**: Simple yet flexible JavaScript charting for designers & developers
- **Recharts**: Redefined chart library built with React and D3

### State Management
- **React Context API**: For global state management across components
- **SWR**: React Hooks library for data fetching, caching, and revalidation
- **Zustand**: Small, fast and scalable state-management solution using simplified flux principles

### API Communication
- **Axios**: Promise-based HTTP client for browser and Node.js
- **React Query**: Data fetching, caching, synchronization and server state management library

### Form Handling
- **React Hook Form**: Performant, flexible and extensible forms with easy-to-use validation
- **Zod**: TypeScript-first schema validation with static type inference

### Authentication
- **NextAuth.js**: Complete authentication solution for Next.js applications
- **JWT (JSON Web Tokens)**: Secure method for representing claims between two parties

### Testing
- **Jest**: JavaScript testing framework focused on simplicity
- **React Testing Library**: Testing utilities encouraging good testing practices
- **Cypress**: End-to-end testing framework for web applications

### Build & Development Tools
- **ESLint**: Static code analysis tool for identifying problematic patterns
- **Prettier**: Opinionated code formatter for consistent code style
- **PostCSS**: Tool for transforming CSS with JavaScript plugins
- **Webpack**: Module bundler for JavaScript applications

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
